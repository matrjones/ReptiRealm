{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/geist_e531dabc.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"geist_e531dabc-module__QGiZLq__className\",\n  \"variable\": \"geist_e531dabc-module__QGiZLq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/geist_e531dabc.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,wJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,wJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,wJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0]}},
    {"offset": {"line": 32, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/geist_mono_68a01160.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"className\": \"geist_mono_68a01160-module__YLcDdW__className\",\n  \"variable\": \"geist_mono_68a01160-module__YLcDdW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["turbopack://[next]/internal/font/google/geist_mono_68a01160.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist_Mono%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist Mono', 'Geist Mono Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,6JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,6JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,6JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0]}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/antho/Desktop/ChatBot/source/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"@/styles/globals.css\";\nimport { AnimatedBackground } from \"animated-backgrounds\";\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <AnimatedBackground animationName=\"starryNight\" />\n      <body>{children}</body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;AAGA;;;;;;AAYO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGR;IACA,qBACE,8OAAC;QAAK,MAAK;;0BACT,8OAAC,+JAAA,CAAA,qBAAkB;gBAAC,eAAc;;;;;;0BAClC,8OAAC;0BAAM;;;;;;;;;;;;AAGb"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/antho/Desktop/ChatBot/source/node_modules/next/src/server/route-modules/app-page/vendored/rsc/react-jsx-dev-runtime.ts"],"sourcesContent":["module.exports = require('../../module.compiled').vendored[\n  'react-rsc'\n].ReactJsxDevRuntime\n"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,QAAQ,0HAAyBC,QAAQ,CACxD,YACD,CAACC,kBAAkB","ignoreList":[0]}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"file":"index.esm.js","sources":["file://C%3A/Users/antho/Desktop/ChatBot/source/node_modules/animated-backgrounds/src/backgroundAnimations.js","file://C%3A/Users/antho/Desktop/ChatBot/source/node_modules/animated-backgrounds/src/AnimatedText.js","file://C%3A/Users/antho/Desktop/ChatBot/source/node_modules/animated-backgrounds/src/index.js"],"sourcesContent":["/**\r\n * @module backgroundAnimations\r\n * @description Collection of animation functions with blend mode support\r\n */\r\n\r\n/**\r\n * Creates a starry night animation with blend modes\r\n */\r\nexport const starryNight = (canvas, ctx) => {\r\n    const stars = [];\r\n    for (let i = 0; i < 150; i++) {\r\n        stars.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2,\r\n            vx: Math.floor(Math.random() * 50) - 25,\r\n            vy: Math.floor(Math.random() * 50) - 25,\r\n            twinkle: Math.random(),\r\n            color: `hsla(${Math.random() * 360}, 70%, 70%, 0.8)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        \r\n        stars.forEach(star => {\r\n            star.twinkle += 0.02;\r\n            const opacity = Math.abs(Math.sin(star.twinkle));\r\n            \r\n            // Create glow effect\r\n            const gradient = ctx.createRadialGradient(\r\n                star.x, star.y, 0,\r\n                star.x, star.y, star.radius * 4\r\n            );\r\n            gradient.addColorStop(0, star.color);\r\n            gradient.addColorStop(1, 'transparent');\r\n            \r\n            ctx.beginPath();\r\n            ctx.arc(star.x, star.y, star.radius * 4, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n            \r\n            // Draw star core\r\n            ctx.beginPath();\r\n            ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${opacity})`;\r\n            ctx.fill();\r\n\r\n            star.x += star.vx / 60;\r\n            star.y += star.vy / 60;\r\n\r\n            if (star.x < 0 || star.x > canvas.width) star.vx = -star.vx;\r\n            if (star.y < 0 || star.y > canvas.height) star.vy = -star.vy;\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates floating bubbles animation with blend modes\r\n */\r\nexport const floatingBubbles = (canvas, ctx) => {\r\n    const bubbles = [];\r\n    for (let i = 0; i < 75; i++) {\r\n        bubbles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 30 + 5,\r\n            speed: Math.random() * 0.7 + 0.1,\r\n            color: `hsla(${Math.random() * 360}, 70%, 60%, 0.6)`,\r\n            glowColor: `hsla(${Math.random() * 360}, 70%, 60%, 0.3)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(30, 41, 59, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        bubbles.forEach(bubble => {\r\n            // Create glow effect\r\n            const gradient = ctx.createRadialGradient(\r\n                bubble.x, bubble.y, 0,\r\n                bubble.x, bubble.y, bubble.radius * 2\r\n            );\r\n            gradient.addColorStop(0, bubble.glowColor);\r\n            gradient.addColorStop(1, 'transparent');\r\n            \r\n            ctx.beginPath();\r\n            ctx.arc(bubble.x, bubble.y, bubble.radius * 2, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n            \r\n            // Draw bubble\r\n            ctx.beginPath();\r\n            ctx.arc(bubble.x, bubble.y, bubble.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = bubble.color;\r\n            ctx.fill();\r\n            \r\n            // Add highlight\r\n            ctx.beginPath();\r\n            ctx.arc(\r\n                bubble.x - bubble.radius * 0.3,\r\n                bubble.y - bubble.radius * 0.3,\r\n                bubble.radius * 0.2,\r\n                0,\r\n                Math.PI * 2\r\n            );\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\r\n            ctx.fill();\r\n\r\n            bubble.y -= bubble.speed;\r\n            bubble.x += Math.sin(bubble.y * 0.03) * 0.5;\r\n            \r\n            if (bubble.y + bubble.radius < 0) {\r\n                bubble.y = canvas.height + bubble.radius;\r\n                bubble.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry gradientWave animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const gradientWave = (canvas, ctx) => {\r\n    let time = 0;\r\n\r\n    return () => {\r\n        time += 0.01;\r\n\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `hsl(${time * 10 % 360}, 70%, 50%)`);\r\n        gradient.addColorStop(1, `hsl(${(time * 10 + 180) % 360}, 70%, 50%)`);\r\n\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        for (let i = 0; i < 7; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height * 0.15 * i + Math.sin(time + i) * 30);\r\n            for (let x = 0; x < canvas.width; x += 10) {\r\n                ctx.lineTo(x, canvas.height * 0.15 * i + Math.sin(time + i + x * 0.01) * 30);\r\n            }\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${0.1 - i * 0.01})`;\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\n/**\r\n * Creates a starry particleNetwork animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const particleNetwork = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 150;\r\n    const maxDistance = 120;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 3 + 1,\r\n            vx: Math.random() * 1.5 - 0.75,\r\n            vy: Math.random() * 1.5 - 0.75,\r\n            color: `hsl(${Math.random() * 360}, 70%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(15, 23, 42, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.vx;\r\n            particle.y += particle.vy;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        for (let i = 0; i < particles.length; i++) {\r\n            for (let j = i + 1; j < particles.length; j++) {\r\n                const dx = particles[i].x - particles[j].x;\r\n                const dy = particles[i].y - particles[j].y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < maxDistance) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particles[i].x, particles[i].y);\r\n                    ctx.lineTo(particles[j].x, particles[j].y);\r\n                    ctx.strokeStyle = `rgba(255, 255, 255, ${1 - distance / maxDistance})`;\r\n                    ctx.lineWidth = 0.5;\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\n\r\n/**\r\n * Creates a starry galaxySpiral animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const galaxySpiral = (canvas, ctx, speed = 0.0001) => {\r\n    const stars = initializeStars(canvas, 2000);\r\n    let rotation = 0;\r\n\r\n    function initializeStars(canvas, starCount) {\r\n        const stars = [];\r\n        for (let i = 0; i < starCount; i++) {\r\n            const distance = Math.random() * canvas.width * 0.4;\r\n            const angle = Math.random() * Math.PI * 2;\r\n            stars.push({\r\n                x: Math.cos(angle) * distance,\r\n                y: Math.sin(angle) * distance,\r\n                radius: Math.random() * 1.5 + 0.5,\r\n                color: `hsl(${Math.random() * 60 + 200}, 80%, 70%)`,\r\n                angle: angle,\r\n                distance: distance\r\n            });\r\n        }\r\n        return stars;\r\n    }\r\n\r\n    function drawStars(ctx, stars, rotation, speed) {\r\n        stars.forEach(star => {\r\n            const x = Math.cos(star.angle) * star.distance;\r\n            const y = Math.sin(star.angle) * star.distance;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(x, y, star.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = star.color;\r\n            ctx.fill();\r\n\r\n            // Adjust the angle increment here to control the speed of star rotation\r\n            star.angle += speed / (star.distance * 0.00008);\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(10, 10, 30, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n        ctx.rotate(rotation);\r\n\r\n        drawStars(ctx, stars, rotation, speed);\r\n\r\n        ctx.restore();\r\n        // Adjust the rotation increment here to control the speed of galaxy rotation\r\n        rotation += speed;\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry rainbowWaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const rainbowWaves = (canvas, ctx) => {\r\n    let time = 0;\r\n    const waves = 7;\r\n    const colors = ['#FF0000', '#FF7F00', '#FFFF00', '#00FF00', '#0000FF', '#4B0082', '#8B00FF'];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.02;\r\n\r\n        for (let i = 0; i < waves; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height / 2);\r\n\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i * 0.5) * 50 +\r\n                    Math.cos(x * 0.02 + time * 0.7 + i * 0.3) * 25 +\r\n                    canvas.height / 2;\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.strokeStyle = colors[i % colors.length];\r\n            ctx.lineWidth = 4;\r\n            ctx.stroke();\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry auroraBorealis animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const auroraBorealis = (canvas, ctx) => {\r\n    let time = 0;\r\n    const colorStops = [\r\n        { pos: 0, color: 'rgba(0, 255, 128, 0.5)' },\r\n        { pos: 0.5, color: 'rgba(0, 128, 255, 0.5)' },\r\n        { pos: 1, color: 'rgba(128, 0, 255, 0.5)' }\r\n    ];\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        time += 0.005;\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            const gradient = ctx.createLinearGradient(0, 0, canvas.width, 0);\r\n            colorStops.forEach(stop => {\r\n                gradient.addColorStop(stop.pos, stop.color);\r\n            });\r\n\r\n            ctx.beginPath();\r\n            for (let x = 0; x < canvas.width; x++) {\r\n                const y = Math.sin(x * 0.01 + time + i) * 50 +\r\n                    Math.sin(x * 0.02 - time * 1.5 + i) * 30 +\r\n                    canvas.height * (0.4 + i * 0.2);\r\n                ctx.lineTo(x, y);\r\n            }\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            ctx.lineTo(0, canvas.height);\r\n            ctx.closePath();\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry neonPulse animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const neonPulse = (canvas, ctx) => {\r\n    const circles = [];\r\n    const colors = ['#FF00FF', '#00FFFF', '#FFFF00', '#FF00AA'];\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        circles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            color: colors[Math.floor(Math.random() * colors.length)],\r\n            phase: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        circles.forEach(circle => {\r\n            const glow = Math.sin(circle.phase) * 20 + 30;\r\n            const gradient = ctx.createRadialGradient(\r\n                circle.x, circle.y, 0,\r\n                circle.x, circle.y, circle.radius\r\n            );\r\n            gradient.addColorStop(0, circle.color);\r\n            gradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(circle.x, circle.y, circle.radius + glow, 0, Math.PI * 2);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            circle.phase += 0.05;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry cosmicDust animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const cosmicDust = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 300;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 2 + 0.5,\r\n            speedX: (Math.random() - 0.5) * 0.5,\r\n            speedY: (Math.random() - 0.5) * 0.5,\r\n            color: `hsl(${Math.random() * 60 + 180}, 100%, 70%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = particle.color;\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry electricStorm animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const electricStorm = (canvas, ctx) => {\r\n    let time = 0;\r\n    const bolts = [];\r\n\r\n    function createBolt() {\r\n        const startX = Math.random() * canvas.width;\r\n        let x = startX;\r\n        let y = 0;\r\n        const points = [{ x, y }];\r\n\r\n        while (y < canvas.height) {\r\n            x += (Math.random() - 0.5) * 50;\r\n            y += Math.random() * 20 + 10;\r\n            points.push({ x, y });\r\n        }\r\n\r\n        return {\r\n            points,\r\n            life: 5 + Math.random() * 5,\r\n            width: Math.random() * 3 + 1\r\n        };\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.2)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        time += 0.1;\r\n        if (Math.random() < 0.1) bolts.push(createBolt());\r\n\r\n        bolts.forEach((bolt, index) => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(bolt.points[0].x, bolt.points[0].y);\r\n            for (let i = 1; i < bolt.points.length; i++) {\r\n                ctx.lineTo(bolt.points[i].x, bolt.points[i].y);\r\n            }\r\n            ctx.strokeStyle = `rgba(180, 220, 255, ${bolt.life / 10})`;\r\n            ctx.lineWidth = bolt.width;\r\n            ctx.stroke();\r\n\r\n            bolt.life -= 0.2;\r\n            if (bolt.life <= 0) bolts.splice(index, 1);\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry quantumField animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const quantumField = (canvas, ctx) => {\r\n    const particles = [];\r\n    const particleCount = 100;\r\n\r\n    for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 4 + 1,\r\n            speedX: (Math.random() - 0.5) * 2,\r\n            speedY: (Math.random() - 0.5) * 2,\r\n            hue: Math.random() * 360\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        particles.forEach(particle => {\r\n            particle.x += particle.speedX;\r\n            particle.y += particle.speedY;\r\n\r\n            if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\r\n            if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsla(${particle.hue}, 100%, 50%, 0.8)`;\r\n            ctx.fill();\r\n\r\n            particles.forEach(otherParticle => {\r\n                const dx = particle.x - otherParticle.x;\r\n                const dy = particle.y - otherParticle.y;\r\n                const distance = Math.sqrt(dx * dx + dy * dy);\r\n\r\n                if (distance < 100) {\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(particle.x, particle.y);\r\n                    ctx.lineTo(otherParticle.x, otherParticle.y);\r\n                    ctx.strokeStyle = `hsla(${(particle.hue + otherParticle.hue) / 2}, 100%, 50%, ${1 - distance / 100})`;\r\n                    ctx.stroke();\r\n                }\r\n            });\r\n\r\n            particle.hue = (particle.hue + 0.5) % 360;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry geometricShapes animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const geometricShapes = (canvas, ctx) => {\r\n    const shapes = [];\r\n    const shapeCount = 50;\r\n\r\n    for (let i = 0; i < shapeCount; i++) {\r\n        shapes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 30 + 10,\r\n            type: Math.floor(Math.random() * 3),\r\n            rotation: Math.random() * Math.PI * 2,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            color: `hsl(${Math.random() * 360}, 70%, 50%)`\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        shapes.forEach(shape => {\r\n            ctx.save();\r\n            ctx.translate(shape.x, shape.y);\r\n            ctx.rotate(shape.rotation);\r\n            ctx.fillStyle = shape.color;\r\n\r\n            switch (shape.type) {\r\n                case 0: // Square\r\n                    ctx.fillRect(-shape.size / 2, -shape.size / 2, shape.size, shape.size);\r\n                    break;\r\n                case 1: // Circle\r\n                    ctx.beginPath();\r\n                    ctx.arc(0, 0, shape.size / 2, 0, Math.PI * 2);\r\n                    ctx.fill();\r\n                    break;\r\n                case 2: // Triangle\r\n                    ctx.beginPath();\r\n                    ctx.moveTo(0, -shape.size / 2);\r\n                    ctx.lineTo(shape.size / 2, shape.size / 2);\r\n                    ctx.lineTo(-shape.size / 2, shape.size / 2);\r\n                    ctx.closePath();\r\n                    ctx.fill();\r\n                    break;\r\n            }\r\n\r\n            ctx.restore();\r\n\r\n            shape.rotation += shape.speed * 0.05;\r\n            shape.y += shape.speed;\r\n            if (shape.y > canvas.height + shape.size) {\r\n                shape.y = -shape.size;\r\n                shape.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry fireflies animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fireflies = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 3 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            brightness: Math.random(),\r\n            angle: Math.random() * Math.PI * 2\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        fireflies.forEach(firefly => {\r\n            firefly.brightness += Math.random() * 0.1 - 0.05;\r\n            firefly.brightness = Math.max(0, Math.min(1, firefly.brightness));\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.brightness})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.cos(firefly.angle) * firefly.speed;\r\n            firefly.y += Math.sin(firefly.angle) * firefly.speed;\r\n\r\n            if (firefly.x < 0 || firefly.x > canvas.width || firefly.y < 0 || firefly.y > canvas.height) {\r\n                firefly.angle += Math.PI;\r\n            }\r\n\r\n            if (Math.random() < 0.01) {\r\n                firefly.angle = Math.random() * Math.PI * 2;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry matrixRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const matrixRain = (canvas, ctx) => {\r\n    const columns = Math.floor(canvas.width / 20);\r\n    const drops = [];\r\n\r\n    for (let i = 0; i < columns; i++) {\r\n        drops[i] = Math.random() * canvas.height;\r\n    }\r\n\r\n    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%^&*()_+[]{}|;:,.<>?';\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.fillStyle = '#0F0';\r\n        ctx.font = '15px monospace';\r\n\r\n        for (let i = 0; i < drops.length; i++) {\r\n            const text = characters[Math.floor(Math.random() * characters.length)];\r\n            ctx.fillText(text, i * 20, drops[i] * 20);\r\n\r\n            if (drops[i] * 20 > canvas.height && Math.random() > 0.975) {\r\n                drops[i] = 0;\r\n            }\r\n            drops[i] += 0.6;\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry dnaHelix animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const dnaHelix = (canvas, ctx) => {\r\n    const speed = 0.02\r\n    const baseRadius = 100\r\n    const amplitude = 50\r\n    const nucleotideSize = 5\r\n    let t = 0;\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.save();\r\n        ctx.translate(canvas.width / 2, canvas.height / 2);\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n            ctx.beginPath();\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 10) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.lineTo(x, r);\r\n            }\r\n            ctx.strokeStyle = i === 0 ? 'rgba(255, 0, 0, 0.5)' : 'rgba(0, 0, 255, 0.5)';\r\n            ctx.lineWidth = 2;\r\n            ctx.stroke();\r\n\r\n            // Draw nucleotides\r\n            for (let x = -canvas.width / 2; x < canvas.width / 2; x += 40) {\r\n                const y = Math.sin(x * 0.01 + t + i * Math.PI) * amplitude;\r\n                const r = baseRadius + y;\r\n                ctx.fillStyle = i === 0 ? 'rgba(255, 255, 0, 0.8)' : 'rgba(0, 255, 0, 0.8)';\r\n                ctx.beginPath();\r\n                ctx.arc(x, r, nucleotideSize, 0, Math.PI * 2);\r\n                ctx.fill();\r\n            }\r\n        }\r\n\r\n        ctx.restore();\r\n        t += speed;\r\n    };\r\n}\r\n/**\r\n * Creates a starry neuralNetwork animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const neuralNetwork = (canvas, ctx) => {\r\n    const nodeCount = 30;\r\n    const connectionProbability = 0.2;\r\n    const speed = 0.3;\r\n    const nodes = [];\r\n    const connections = [];\r\n\r\n    // Create background gradient\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#000000');\r\n    backgroundGradient.addColorStop(1, '#1a1a2e');\r\n\r\n    for (let i = 0; i < nodeCount; i++) {\r\n        nodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * speed,\r\n            vy: (Math.random() - 0.5) * speed,\r\n            size: Math.random() * 2 + 2\r\n        });\r\n    }\r\n\r\n    // Pre-compute connections\r\n    for (let i = 0; i < nodes.length; i++) {\r\n        for (let j = i + 1; j < nodes.length; j++) {\r\n            if (Math.random() < connectionProbability) {\r\n                connections.push([i, j]);\r\n            }\r\n        }\r\n    }\r\n\r\n    return () => {\r\n        // Draw background\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Update and draw nodes\r\n        nodes.forEach((node, index) => {\r\n            node.x += node.vx;\r\n            node.y += node.vy;\r\n\r\n            if (node.x < 0 || node.x > canvas.width) node.vx *= -1;\r\n            if (node.y < 0 || node.y > canvas.height) node.vy *= -1;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `hsl(${index * (360 / nodeCount)}, 100%, 50%)`;\r\n            ctx.fill();\r\n\r\n            // Add glow effect\r\n            ctx.beginPath();\r\n            ctx.arc(node.x, node.y, node.size + 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(node.x, node.y, node.size, node.x, node.y, node.size + 3);\r\n            gradient.addColorStop(0, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0.8)`);\r\n            gradient.addColorStop(1, `hsla(${index * (360 / nodeCount)}, 100%, 50%, 0)`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw connections\r\n        connections.forEach(([i, j]) => {\r\n            const dx = nodes[i].x - nodes[j].x;\r\n            const dy = nodes[i].y - nodes[j].y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            const opacity = 1 - distance / Math.max(canvas.width, canvas.height);\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(nodes[i].x, nodes[i].y);\r\n            ctx.lineTo(nodes[j].x, nodes[j].y);\r\n            ctx.strokeStyle = `rgba(255, 255, 255, ${opacity * 0.2})`;\r\n            ctx.stroke();\r\n        });\r\n\r\n        // Add subtle particle effect\r\n        for (let i = 0; i < 5; i++) {\r\n            ctx.beginPath();\r\n            ctx.arc(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 1.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\r\n            ctx.fill();\r\n        }\r\n    };\r\n}\r\n/**\r\n * Creates a starry oceanWaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const oceanWaves = (canvas, ctx) => {\r\n    const waveCount = 7;\r\n    const amplitude = 30;\r\n    const frequency = 0.02;\r\n    const speed = 0.03;\r\n    let time = 0;\r\n\r\n    // Create sky gradient\r\n    const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height * 0.6);\r\n    skyGradient.addColorStop(0, '#87CEEB');\r\n    skyGradient.addColorStop(1, '#E0F6FF');\r\n\r\n    // Create sun\r\n    const sun = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 40,\r\n        glow: 20\r\n    };\r\n\r\n    // Create clouds\r\n    const clouds = [\r\n        { x: canvas.width * 0.1, y: canvas.height * 0.15, radius: 30 },\r\n        { x: canvas.width * 0.3, y: canvas.height * 0.1, radius: 40 },\r\n        { x: canvas.width * 0.6, y: canvas.height * 0.2, radius: 35 }\r\n    ];\r\n\r\n    return () => {\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height * 0.6);\r\n\r\n        // Draw sun\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(sun.x, sun.y, sun.radius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(sun.x, sun.y, sun.radius - sun.glow, sun.x, sun.y, sun.radius + sun.glow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 0, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw clouds\r\n        clouds.forEach(cloud => {\r\n            ctx.beginPath();\r\n            ctx.arc(cloud.x, cloud.y, cloud.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw ocean\r\n        for (let i = 0; i < waveCount; i++) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(0, canvas.height);\r\n\r\n            for (let x = 0; x <= canvas.width; x += 5) {\r\n                const y = Math.sin(x * frequency + time + i * 0.5) * amplitude * (1 + i * 0.1) +\r\n                    (canvas.height - (i + 1) * (canvas.height * 0.4 / waveCount));\r\n                ctx.lineTo(x, y);\r\n            }\r\n\r\n            ctx.lineTo(canvas.width, canvas.height);\r\n            const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n            gradient.addColorStop(0, `rgba(0, 100, 255, ${0.1 + (i / waveCount) * 0.15})`);\r\n            gradient.addColorStop(1, `rgba(0, 50, 200, ${0.1 + (i / waveCount) * 0.15})`);\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        }\r\n\r\n        time += speed;\r\n    };\r\n}\r\n/**\r\n * Creates a starry snowFall animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const snowFall = (canvas, ctx) => {\r\n    const snowflakeCount = 200;\r\n    const snowflakes = [];\r\n    const backgroundGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n    backgroundGradient.addColorStop(0, '#0c1445');\r\n    backgroundGradient.addColorStop(1, '#1c2754');\r\n\r\n    // Create moon\r\n    const moon = {\r\n        x: canvas.width * 0.8,\r\n        y: canvas.height * 0.2,\r\n        radius: 50,\r\n        glow: 20\r\n    };\r\n\r\n    // Create mountains\r\n    const mountains = [\r\n        { points: [[0, canvas.height], [canvas.width * 0.3, canvas.height * 0.7], [canvas.width * 0.5, canvas.height]], color: '#0a1128' },\r\n        { points: [[canvas.width * 0.4, canvas.height], [canvas.width * 0.7, canvas.height * 0.75], [canvas.width, canvas.height]], color: '#0d1636' }\r\n    ];\r\n\r\n    for (let i = 0; i < snowflakeCount; i++) {\r\n        snowflakes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            vx: (Math.random() - 0.5) * 1.5,\r\n            vy: Math.random() * 1 + 0.5,\r\n            size: Math.random() * 3 + 1,\r\n            opacity: Math.random() * 0.5 + 0.5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = backgroundGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw moon\r\n        ctx.save();\r\n        ctx.beginPath();\r\n        ctx.arc(moon.x, moon.y, moon.radius, 0, Math.PI * 2);\r\n        const moonGradient = ctx.createRadialGradient(moon.x, moon.y, moon.radius - moon.glow, moon.x, moon.y, moon.radius + moon.glow);\r\n        moonGradient.addColorStop(0, 'rgba(255, 255, 230, 1)');\r\n        moonGradient.addColorStop(0.5, 'rgba(255, 255, 230, 0.3)');\r\n        moonGradient.addColorStop(1, 'rgba(255, 255, 230, 0)');\r\n        ctx.fillStyle = moonGradient;\r\n        ctx.fill();\r\n        ctx.restore();\r\n\r\n        // Draw mountains\r\n        mountains.forEach(mountain => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(mountain.points[0][0], mountain.points[0][1]);\r\n            mountain.points.forEach(point => ctx.lineTo(point[0], point[1]));\r\n            ctx.fillStyle = mountain.color;\r\n            ctx.fill();\r\n        });\r\n\r\n        snowflakes.forEach(flake => {\r\n            flake.x += flake.vx + Math.sin(flake.y * 0.01) * 0.3;\r\n            flake.y += flake.vy;\r\n\r\n            if (flake.y > canvas.height) {\r\n                flake.x = Math.random() * canvas.width;\r\n                flake.y = -flake.size;\r\n                flake.vx = (Math.random() - 0.5) * 1.5;\r\n                flake.vy = Math.random() * 1 + 0.5;\r\n            }\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(flake.x, flake.y, flake.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 255, ${flake.opacity})`;\r\n            ctx.fill();\r\n        });\r\n\r\n        // Add a subtle glow effect\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.03)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    };\r\n}\r\n\r\n/**\r\n * Creates a starry fireflyForest animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fireflyForest = (canvas, ctx) => {\r\n    const fireflies = [];\r\n    const fireflyCount = 100;\r\n    const trees = [];\r\n    const treeCount = 5;\r\n\r\n    // Create trees\r\n    for (let i = 0; i < treeCount; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            height: Math.random() * 200 + 300,\r\n            width: Math.random() * 100 + 50\r\n        });\r\n    }\r\n\r\n    // Create fireflies\r\n    for (let i = 0; i < fireflyCount; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.01,\r\n            glowIntensity: Math.random()\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Night sky\r\n        ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, tree.y);\r\n            ctx.lineTo(tree.x - tree.width / 2, tree.y - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, tree.y - tree.height);\r\n            ctx.closePath();\r\n            ctx.fillStyle = 'rgba(0, 50, 0, 0.8)';\r\n            ctx.fill();\r\n        });\r\n\r\n        // Update and draw fireflies\r\n        fireflies.forEach(fly => {\r\n            fly.x += Math.cos(fly.angle) * fly.speed;\r\n            fly.y += Math.sin(fly.angle) * fly.speed;\r\n            fly.angle += fly.angleSpeed;\r\n\r\n            if (fly.x < 0 || fly.x > canvas.width) fly.angle = Math.PI - fly.angle;\r\n            if (fly.y < 0 || fly.y > canvas.height) fly.angle = -fly.angle;\r\n\r\n            fly.glowIntensity = Math.sin(Date.now() * 0.002 + fly.x * 0.1) * 0.5 + 0.5;\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${fly.glowIntensity})`;\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.arc(fly.x, fly.y, fly.radius * 3, 0, Math.PI * 2);\r\n            const gradient = ctx.createRadialGradient(fly.x, fly.y, 0, fly.x, fly.y, fly.radius * 3);\r\n            gradient.addColorStop(0, `rgba(255, 255, 100, ${fly.glowIntensity * 0.5})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 100, 0)');\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry realisticClouds animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const realisticClouds = (canvas, ctx) => {\r\n    const clouds = [];\r\n    const cloudCount = 10;\r\n    let gradientHeight;\r\n\r\n    function createCloud(x, y) {\r\n        const particleCount = Math.floor(Math.random() * 50) + 50;\r\n        const particles = [];\r\n\r\n        for (let i = 0; i < particleCount; i++) {\r\n            particles.push({\r\n                x: x + Math.random() * 200 - 100,\r\n                y: y + Math.random() * 100 - 50,\r\n                radius: Math.random() * 30 + 10\r\n            });\r\n        }\r\n\r\n        return {\r\n            particles,\r\n            x,\r\n            y,\r\n            speed: Math.random() * 0.5 + 0.1\r\n        };\r\n    }\r\n\r\n    for (let i = 0; i < cloudCount; i++) {\r\n        clouds.push(createCloud(Math.random() * canvas.width, Math.random() * (canvas.height / 2)));\r\n    }\r\n\r\n    // Create gradient for the sky\r\n    const createSkyGradient = () => {\r\n        gradientHeight = canvas.height;\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, gradientHeight);\r\n        gradient.addColorStop(0, '#1e90ff');  // Dodger Blue\r\n        gradient.addColorStop(0.5, '#87ceeb'); // Sky Blue\r\n        gradient.addColorStop(1, '#e6f3ff');  // Very Light Blue\r\n        return gradient;\r\n    }\r\n\r\n    let skyGradient = createSkyGradient();\r\n\r\n    return () => {\r\n        // Redraw sky gradient if canvas size has changed\r\n        if (gradientHeight !== canvas.height) {\r\n            skyGradient = createSkyGradient();\r\n        }\r\n\r\n        // Draw sky\r\n        ctx.fillStyle = skyGradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        clouds.forEach(cloud => {\r\n            cloud.x += cloud.speed;\r\n            if (cloud.x > canvas.width + 200) {\r\n                cloud.x = -200;\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(cloud.x, cloud.y);\r\n\r\n            // Draw cloud shadow\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x + 5, particle.y + 5, particle.radius, 0, Math.PI * 2);\r\n                ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n                ctx.fill();\r\n            });\r\n\r\n            // Draw cloud\r\n            cloud.particles.forEach(particle => {\r\n                ctx.beginPath();\r\n                ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n                const gradient = ctx.createRadialGradient(particle.x, particle.y, 0, particle.x, particle.y, particle.radius);\r\n                gradient.addColorStop(0, 'rgba(255, 255, 255, 0.8)');\r\n                gradient.addColorStop(1, 'rgba(255, 255, 255, 0.2)');\r\n                ctx.fillStyle = gradient;\r\n                ctx.fill();\r\n            });\r\n\r\n            ctx.restore();\r\n        });\r\n\r\n        // Optional: Add sun\r\n        const sunRadius = 40;\r\n        const sunGlow = 20;\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width - 100, 100, sunRadius, 0, Math.PI * 2);\r\n        const sunGradient = ctx.createRadialGradient(canvas.width - 100, 100, 0, canvas.width - 100, 100, sunRadius + sunGlow);\r\n        sunGradient.addColorStop(0, 'rgba(255, 255, 200, 1)');\r\n        sunGradient.addColorStop(0.8, 'rgba(255, 255, 0, 0.3)');\r\n        sunGradient.addColorStop(1, 'rgba(255, 255, 0, 0)');\r\n        ctx.fillStyle = sunGradient;\r\n        ctx.fill();\r\n    };\r\n};\r\n/**\r\n * Creates a starry autumnLeaves animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const autumnLeaves = (canvas, ctx) => {\r\n    const leaves = [];\r\n    const leafCount = 100;\r\n    const leafColors = ['#ff6b6b', '#feca57', '#ff9ff3', '#ff9f43', '#e17055'];\r\n    const leafImages = [\r\n        '1.jpg',\r\n        '2.jpg',\r\n    ];\r\n    const leafImagesLoaded = [];\r\n    let imagesLoaded = false;\r\n\r\n    // Load images\r\n    const loadImages = () => {\r\n        let loadedCount = 0;\r\n        leafImages.forEach((src, index) => {\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                leafImagesLoaded[index] = img;\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.onerror = () => {\r\n                loadedCount++;\r\n                if (loadedCount === leafImages.length) {\r\n                    imagesLoaded = true;\r\n                }\r\n            };\r\n            img.src = src;\r\n        });\r\n    };\r\n\r\n    loadImages();\r\n\r\n    for (let i = 0; i < leafCount; i++) {\r\n        leaves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 20 + 10,\r\n            speed: Math.random() * 2 + 1,\r\n            amplitude: Math.random() * 20 + 10,\r\n            angle: Math.random() * Math.PI * 2,\r\n            angleSpeed: (Math.random() - 0.5) * 0.05,\r\n            imageIndex: Math.floor(Math.random() * leafImages.length),\r\n            color: leafColors[Math.floor(Math.random() * leafColors.length)]\r\n        });\r\n    }\r\n\r\n    const drawLeaf = (leaf) => {\r\n        ctx.save();\r\n        ctx.translate(leaf.x, leaf.y);\r\n        ctx.rotate(leaf.angle);\r\n\r\n        if (imagesLoaded && leafImagesLoaded[leaf.imageIndex]) {\r\n            ctx.drawImage(leafImagesLoaded[leaf.imageIndex], -leaf.size / 2, -leaf.size / 2, leaf.size, leaf.size);\r\n        } else {\r\n            // Fallback: draw a colored oval if image is not available\r\n            ctx.beginPath();\r\n            ctx.ellipse(0, 0, leaf.size / 2, leaf.size / 4, 0, 0, Math.PI * 2);\r\n            ctx.fillStyle = leaf.color;\r\n            ctx.fill();\r\n        }\r\n\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(135, 206, 235, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        leaves.forEach(leaf => {\r\n            leaf.y += leaf.speed;\r\n            leaf.x += Math.sin(leaf.y * 0.01) * leaf.amplitude * 0.05;\r\n            leaf.angle += leaf.angleSpeed;\r\n\r\n            if (leaf.y > canvas.height) {\r\n                leaf.y = -leaf.size;\r\n                leaf.x = Math.random() * canvas.width;\r\n            }\r\n\r\n            drawLeaf(leaf);\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry realisticRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const realisticRain = (canvas, ctx) => {\r\n    const raindrops = [];\r\n    const dropCount = 1000;\r\n    const splashes = [];\r\n\r\n    for (let i = 0; i < dropCount; i++) {\r\n        raindrops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 10 + 15\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw and update raindrops\r\n        ctx.strokeStyle = 'rgba(174, 194, 224, 0.5)';\r\n        ctx.lineWidth = 1;\r\n        raindrops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = -drop.length;\r\n                splashes.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    radius: Math.random() * 3 + 1,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw and update splashes\r\n        splashes.forEach((splash, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splash.x, splash.y, splash.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(174, 194, 224, ${splash.opacity})`;\r\n            ctx.fill();\r\n\r\n            splash.radius += 0.1;\r\n            splash.opacity -= 0.03;\r\n\r\n            if (splash.opacity <= 0) {\r\n                splashes.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry fallingFoodFiesta animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const fallingFoodFiesta = (canvas, ctx) => {\r\n    const foodItems = [];\r\n    const foodTypes = ['🍔', '🍕', '🌭', '🍟', '🌮', '🍣', '🍩', '🍦', '🍎', '🍇', '🍓', '🍑', '🍍', '🥑', '🥕', '🥪', '🥨', '🧀', '🥐', '🥯', '🍱', '🍜', '🍙', '🍗', '🥟', '🥘', '🍤', '🥞', '🧇', '🥓'];\r\n    const numItems = 50;\r\n\r\n    // Lighter gradient colors\r\n    const colors = [\r\n        { r: 255, g: 102, b: 102 },  // Light Red\r\n        { r: 255, g: 178, b: 102 },  // Light Orange\r\n        { r: 255, g: 255, b: 153 },  // Light Yellow\r\n        { r: 153, g: 255, b: 153 },  // Light Green\r\n        { r: 153, g: 204, b: 255 },  // Light Blue\r\n        { r: 178, g: 102, b: 255 },  // Light Indigo\r\n        { r: 255, g: 153, b: 255 }   // Light Violet\r\n    ];\r\n\r\n    let colorIndex = 0;\r\n    let nextColorIndex = 1;\r\n    let colorT = 0;\r\n    const colorSpeed = 0.005;\r\n\r\n    for (let i = 0; i < numItems; i++) {\r\n        foodItems.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height - canvas.height,\r\n            emoji: foodTypes[Math.floor(Math.random() * foodTypes.length)],\r\n            size: Math.random() * 20 + 30,\r\n            speed: Math.random() * 1.5 + 0.5,\r\n            rotation: Math.random() * Math.PI * 2,\r\n            rotationSpeed: (Math.random() * 2 - 1) * 0.02\r\n        });\r\n    }\r\n\r\n    const lerpColor = (color1, color2, t) => {\r\n        return {\r\n            r: Math.round(color1.r + (color2.r - color1.r) * t),\r\n            g: Math.round(color1.g + (color2.g - color1.g) * t),\r\n            b: Math.round(color1.b + (color2.b - color1.b) * t)\r\n        };\r\n    };\r\n\r\n    return () => {\r\n        // Update gradient colors\r\n        colorT += colorSpeed;\r\n        if (colorT >= 1) {\r\n            colorT = 0;\r\n            colorIndex = nextColorIndex;\r\n            nextColorIndex = (nextColorIndex + 1) % colors.length;\r\n        }\r\n        const currentColor = lerpColor(colors[colorIndex], colors[nextColorIndex], colorT);\r\n\r\n        // Create moving gradient with lighter colors\r\n        const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n        gradient.addColorStop(0, `rgb(${currentColor.r}, ${currentColor.g}, ${currentColor.b})`);\r\n        gradient.addColorStop(1, `rgb(${255 - currentColor.r}, ${255 - currentColor.g}, ${255 - currentColor.b})`);\r\n\r\n        // Apply blur effect to the gradient\r\n        ctx.filter = 'blur(5px)';\r\n\r\n        // Draw gradient background\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Reset filter for subsequent drawing\r\n        ctx.filter = 'none';\r\n\r\n        // Draw food items\r\n        foodItems.forEach(item => {\r\n            ctx.save();\r\n            ctx.translate(item.x, item.y);\r\n            ctx.rotate(item.rotation);\r\n            ctx.font = `${item.size}px Arial`;\r\n            ctx.textAlign = 'center';\r\n            ctx.textBaseline = 'middle';\r\n\r\n            // Add a white outline for better visibility\r\n            ctx.strokeStyle = 'white';\r\n            ctx.lineWidth = 3;\r\n            ctx.strokeText(item.emoji, 0, 0);\r\n\r\n            // Fill with black for contrast\r\n            ctx.fillStyle = 'black';\r\n            ctx.fillText(item.emoji, 0, 0);\r\n            ctx.restore();\r\n\r\n            item.y += item.speed;\r\n            item.rotation += item.rotationSpeed;\r\n            if (item.y > canvas.height + item.size) {\r\n                item.y = -item.size;\r\n                item.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry hauntedForest animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const hauntedForest = (canvas, ctx) => {\r\n    const trees = [];\r\n    const fireflies = [];\r\n    const fog = [];\r\n\r\n    // Initialize trees\r\n    for (let i = 0; i < 20; i++) {\r\n        trees.push({\r\n            x: Math.random() * canvas.width,\r\n            height: Math.random() * 200 + 100,\r\n            width: Math.random() * 20 + 10,\r\n        });\r\n    }\r\n\r\n    // Initialize fireflies\r\n    for (let i = 0; i < 50; i++) {\r\n        fireflies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 2 + 1,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random(),\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 100; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 50 + 20,\r\n            speed: Math.random() * 0.2 + 0.1,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#0a0a0a';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw trees\r\n        ctx.fillStyle = '#1a1a1a';\r\n        trees.forEach(tree => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(tree.x, canvas.height);\r\n            ctx.lineTo(tree.x - tree.width / 2, canvas.height - tree.height);\r\n            ctx.lineTo(tree.x + tree.width / 2, canvas.height - tree.height);\r\n            ctx.closePath();\r\n            ctx.fill();\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(200, 200, 200, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n\r\n        // Draw fireflies\r\n        fireflies.forEach(firefly => {\r\n            ctx.beginPath();\r\n            ctx.arc(firefly.x, firefly.y, firefly.radius, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(255, 255, 100, ${firefly.opacity})`;\r\n            ctx.fill();\r\n\r\n            firefly.x += Math.sin(Date.now() * 0.001) * firefly.speed;\r\n            firefly.y += Math.cos(Date.now() * 0.001) * firefly.speed;\r\n            firefly.opacity = Math.sin(Date.now() * 0.01) * 0.5 + 0.5;\r\n\r\n            if (firefly.x < 0) firefly.x = canvas.width;\r\n            if (firefly.x > canvas.width) firefly.x = 0;\r\n            if (firefly.y < 0) firefly.y = canvas.height;\r\n            if (firefly.y > canvas.height) firefly.y = 0;\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry ghostlyApparitions animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const ghostlyApparitions = (canvas, ctx) => {\r\n    const ghosts = [];\r\n    const numGhosts = 5;\r\n\r\n    for (let i = 0; i < numGhosts; i++) {\r\n        ghosts.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 50 + 30,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            opacity: Math.random() * 0.5,\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = '#000033';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ghosts.forEach(ghost => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(ghost.x, ghost.y);\r\n            ctx.bezierCurveTo(\r\n                ghost.x - ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x - ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x, ghost.y + ghost.size\r\n            );\r\n            ctx.bezierCurveTo(\r\n                ghost.x + ghost.size / 2, ghost.y + ghost.size / 2,\r\n                ghost.x + ghost.size / 2, ghost.y - ghost.size / 2,\r\n                ghost.x, ghost.y\r\n            );\r\n\r\n            const gradient = ctx.createRadialGradient(\r\n                ghost.x, ghost.y, 0,\r\n                ghost.x, ghost.y, ghost.size\r\n            );\r\n            gradient.addColorStop(0, `rgba(255, 255, 255, ${ghost.opacity})`);\r\n            gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\r\n\r\n            ctx.fillStyle = gradient;\r\n            ctx.fill();\r\n\r\n            ghost.y -= ghost.speed;\r\n            ghost.opacity = Math.sin(Date.now() * 0.001) * 0.2 + 0.3;\r\n\r\n            if (ghost.y + ghost.size < 0) {\r\n                ghost.y = canvas.height + ghost.size;\r\n                ghost.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry spiderwebOverlay animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const spiderwebOverlay = (canvas, ctx) => {\r\n    const webs = [];\r\n    const numWebs = 20;\r\n\r\n    for (let i = 0; i < numWebs; i++) {\r\n        webs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 100 + 50,\r\n            rotation: Math.random() * Math.PI * 2,\r\n        });\r\n    }\r\n\r\n    const drawWeb = (x, y, size, rotation) => {\r\n        ctx.save();\r\n        ctx.translate(x, y);\r\n        ctx.rotate(rotation);\r\n\r\n        ctx.beginPath();\r\n        for (let i = 0; i < 8; i++) {\r\n            const angle = (Math.PI * 2 / 8) * i;\r\n            ctx.moveTo(0, 0);\r\n            ctx.lineTo(Math.cos(angle) * size, Math.sin(angle) * size);\r\n        }\r\n\r\n        for (let r = size / 4; r < size; r += size / 4) {\r\n            ctx.moveTo(r, 0);\r\n            for (let i = 1; i < 8; i++) {\r\n                const angle = (Math.PI * 2 / 8) * i;\r\n                ctx.lineTo(Math.cos(angle) * r, Math.sin(angle) * r);\r\n            }\r\n            ctx.closePath();\r\n        }\r\n\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.stroke();\r\n        ctx.restore();\r\n    };\r\n\r\n    return () => {\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n        webs.forEach(web => {\r\n            drawWeb(web.x, web.y, web.size, web.rotation);\r\n        });\r\n    };\r\n};\r\n\r\n/**\r\n * Creates a starry undeadGraveyard animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const undeadGraveyard = (canvas, ctx) => {\r\n    const graves = [];\r\n    const zombies = [];\r\n    const fog = [];\r\n\r\n    // Initialize graves\r\n    for (let i = 0; i < 15; i++) {\r\n        graves.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height - Math.random() * 100 - 50,\r\n            width: Math.random() * 30 + 20,\r\n            height: Math.random() * 40 + 30\r\n        });\r\n    }\r\n\r\n    // Initialize zombies\r\n    for (let i = 0; i < 10; i++) {\r\n        zombies.push({\r\n            x: Math.random() * canvas.width,\r\n            y: canvas.height,\r\n            speed: Math.random() * 0.5 + 0.1,\r\n            size: Math.random() * 30 + 20\r\n        });\r\n    }\r\n\r\n    // Initialize fog\r\n    for (let i = 0; i < 50; i++) {\r\n        fog.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            radius: Math.random() * 100 + 50,\r\n            speed: Math.random() * 0.2 + 0.1\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        // Dark, eerie sky\r\n        const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\r\n        gradient.addColorStop(0, '#0a0a1a');\r\n        gradient.addColorStop(1, '#1a0a1a');\r\n        ctx.fillStyle = gradient;\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Moon\r\n        ctx.beginPath();\r\n        ctx.arc(canvas.width * 0.8, canvas.height * 0.2, 40, 0, Math.PI * 2);\r\n        ctx.fillStyle = 'rgba(255, 255, 200, 0.8)';\r\n        ctx.fill();\r\n\r\n        // Draw graves\r\n        ctx.fillStyle = '#333';\r\n        graves.forEach(grave => {\r\n            ctx.fillRect(grave.x, grave.y, grave.width, grave.height);\r\n            ctx.fillStyle = '#222';\r\n            ctx.fillRect(grave.x + grave.width * 0.1, grave.y, grave.width * 0.8, grave.height * 0.1);\r\n        });\r\n\r\n        // Draw zombies\r\n        zombies.forEach(zombie => {\r\n            ctx.beginPath();\r\n            ctx.arc(zombie.x, zombie.y - zombie.size, zombie.size * 0.5, 0, Math.PI * 2);\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            ctx.beginPath();\r\n            ctx.moveTo(zombie.x, zombie.y - zombie.size);\r\n            ctx.lineTo(zombie.x - zombie.size * 0.5, zombie.y);\r\n            ctx.lineTo(zombie.x + zombie.size * 0.5, zombie.y);\r\n            ctx.closePath();\r\n            ctx.fillStyle = '#3a5';\r\n            ctx.fill();\r\n\r\n            zombie.y -= zombie.speed;\r\n            if (zombie.y < canvas.height * 0.7) {\r\n                zombie.y = canvas.height;\r\n                zombie.x = Math.random() * canvas.width;\r\n            }\r\n        });\r\n\r\n        // Draw fog\r\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';\r\n        fog.forEach(particle => {\r\n            ctx.beginPath();\r\n            ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            particle.x += particle.speed;\r\n            if (particle.x > canvas.width + particle.radius) {\r\n                particle.x = -particle.radius;\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry bloodRain animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const bloodRain = (canvas, ctx) => {\r\n    const drops = [];\r\n    const splats = [];\r\n\r\n    for (let i = 0; i < 200; i++) {\r\n        drops.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            length: Math.random() * 20 + 10,\r\n            speed: Math.random() * 5 + 5\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(20, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw rain\r\n        ctx.strokeStyle = '#800';\r\n        ctx.lineWidth = 1;\r\n        drops.forEach(drop => {\r\n            ctx.beginPath();\r\n            ctx.moveTo(drop.x, drop.y);\r\n            ctx.lineTo(drop.x, drop.y + drop.length);\r\n            ctx.stroke();\r\n\r\n            drop.y += drop.speed;\r\n\r\n            if (drop.y > canvas.height) {\r\n                drop.y = 0;\r\n                drop.x = Math.random() * canvas.width;\r\n\r\n                // Create a splat\r\n                splats.push({\r\n                    x: drop.x,\r\n                    y: canvas.height,\r\n                    size: Math.random() * 5 + 2,\r\n                    opacity: 1\r\n                });\r\n            }\r\n        });\r\n\r\n        // Draw splats\r\n        splats.forEach((splat, index) => {\r\n            ctx.beginPath();\r\n            ctx.arc(splat.x, splat.y, splat.size, 0, Math.PI * 2);\r\n            ctx.fillStyle = `rgba(128, 0, 0, ${splat.opacity})`;\r\n            ctx.fill();\r\n\r\n            splat.opacity -= 0.005;\r\n            if (splat.opacity <= 0) {\r\n                splats.splice(index, 1);\r\n            }\r\n        });\r\n    };\r\n};\r\n/**\r\n * Creates a starry creepyCrawlies animation\r\n * @param {HTMLCanvasElement} canvas - The canvas element\r\n * @param {CanvasRenderingContext2D} ctx - The canvas 2D rendering context\r\n * @returns {Function} Animation loop function\r\n */\r\nexport const creepyCrawlies = (canvas, ctx) => {\r\n    const bugs = [];\r\n    const webNodes = [];\r\n\r\n    for (let i = 0; i < 50; i++) {\r\n        bugs.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height,\r\n            size: Math.random() * 5 + 2,\r\n            speedX: Math.random() * 2 - 1,\r\n            speedY: Math.random() * 2 - 1\r\n        });\r\n    }\r\n\r\n    for (let i = 0; i < 20; i++) {\r\n        webNodes.push({\r\n            x: Math.random() * canvas.width,\r\n            y: Math.random() * canvas.height\r\n        });\r\n    }\r\n\r\n    return () => {\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        // Draw web\r\n        ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\r\n        ctx.beginPath();\r\n        webNodes.forEach((node, index) => {\r\n            webNodes.slice(index + 1).forEach(otherNode => {\r\n                ctx.moveTo(node.x, node.y);\r\n                ctx.lineTo(otherNode.x, otherNode.y);\r\n            });\r\n        });\r\n        ctx.stroke();\r\n\r\n        // Draw and move bugs\r\n        ctx.fillStyle = '#400';\r\n        bugs.forEach(bug => {\r\n            ctx.beginPath();\r\n            ctx.arc(bug.x, bug.y, bug.size, 0, Math.PI * 2);\r\n            ctx.fill();\r\n\r\n            bug.x += bug.speedX;\r\n            bug.y += bug.speedY;\r\n\r\n            if (bug.x < 0 || bug.x > canvas.width) bug.speedX *= -1;\r\n            if (bug.y < 0 || bug.y > canvas.height) bug.speedY *= -1;\r\n\r\n            // Occasionally change direction\r\n            if (Math.random() < 0.01) {\r\n                bug.speedX = Math.random() * 2 - 1;\r\n                bug.speedY = Math.random() * 2 - 1;\r\n            }\r\n        });\r\n    };\r\n};","/**\r\n * @fileoverview Animated Text Component for React applications\r\n * @module AnimatedText\r\n * @requires react\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n/**\r\n * @typedef {Object} AnimatedTextConfig\r\n * @property {number} [speed=100] - Animation speed in milliseconds\r\n * @property {boolean} [loop=false] - Whether to loop the animation\r\n * @property {number} [delay=0] - Delay before animation starts\r\n * @property {string} [color='currentColor'] - Text color\r\n */\r\n\r\n/**\r\n * @typedef {Object} AnimatedTextProps\r\n * @property {string} text - The text to animate\r\n * @property {('typewriter'|'fadeIn'|'bounce'|'glitch'|'rainbow')} [effect='typewriter'] - Animation effect\r\n * @property {AnimatedTextConfig} [config] - Animation configuration\r\n * @property {Object} [styles] - Custom CSS styles\r\n */\r\n\r\nclass TextErrorBoundary extends React.Component {\r\n    state = { hasError: false };\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <span>Animation failed to load.</span>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n/**\r\n * AnimatedText Component\r\n * @param {AnimatedTextProps} props - Component props\r\n * @returns {React.ReactElement} Rendered component\r\n */\r\nconst AnimatedText = ({\r\n    text = '',\r\n    effect = 'typewriter',\r\n    config = {},\r\n    styles = {}\r\n}) => {\r\n    const defaultConfig = {\r\n        speed: 100,\r\n        loop: false,\r\n        delay: 0,\r\n        color: 'currentColor',\r\n        ...config\r\n    };\r\n\r\n    const defaultStyles = {\r\n        base: {\r\n            display: 'inline-block',\r\n            fontFamily: 'inherit',\r\n            color: defaultConfig.color,\r\n        },\r\n        typewriter: {\r\n            whiteSpace: 'pre',\r\n            overflow: 'hidden',\r\n            borderRight: '0.15em solid currentColor',\r\n        },\r\n        fadeIn: {\r\n            opacity: 0,\r\n            animation: 'fadeIn 2s forwards',\r\n        },\r\n        bounce: {\r\n            display: 'inline-block',\r\n        },\r\n        glitch: {\r\n            position: 'relative',\r\n            animation: 'glitch 1s linear infinite',\r\n        },\r\n        rainbow: {\r\n            background: 'linear-gradient(to right, #6666ff, #0099ff , #00ff00, #ff3399, #6666ff)',\r\n            backgroundSize: '400%',\r\n            backgroundClip: 'text',\r\n            WebkitBackgroundClip: 'text',\r\n            WebkitTextFillColor: 'transparent',\r\n            animation: 'rainbow 8s ease infinite',\r\n        }\r\n    };\r\n\r\n    const effects = {\r\n        typewriter: (text) => {\r\n            const [displayText, setDisplayText] = useState('');\r\n            const [isAnimating, setIsAnimating] = useState(true);\r\n\r\n            useEffect(() => {\r\n                if (!text) {\r\n                    setIsAnimating(false);\r\n                    return;\r\n                }\r\n\r\n                const startAnimation = () => {\r\n                    let i = 0;\r\n                    setDisplayText('');\r\n                    setIsAnimating(true);\r\n\r\n                    const timer = setInterval(() => {\r\n                        try {\r\n                            if (i < text.length) {\r\n                                setDisplayText(prev => prev + text[i]);\r\n                                i++;\r\n                            } else {\r\n                                setIsAnimating(false);\r\n                                if (defaultConfig.loop) {\r\n                                    setTimeout(startAnimation, defaultConfig.delay);\r\n                                }\r\n                                clearInterval(timer);\r\n                            }\r\n                        } catch (error) {\r\n                            console.error('Animation error:', error);\r\n                            clearInterval(timer);\r\n                            setIsAnimating(false);\r\n                        }\r\n                    }, defaultConfig.speed);\r\n\r\n                    return timer;\r\n                };\r\n\r\n                const timer = setTimeout(startAnimation, defaultConfig.delay);\r\n                return () => clearTimeout(timer);\r\n            }, [text, defaultConfig.loop, defaultConfig.speed, defaultConfig.delay]);\r\n\r\n            return (\r\n                <span\r\n                    style={{\r\n                        ...defaultStyles.base,\r\n                        ...defaultStyles.typewriter,\r\n                        ...styles,\r\n                        borderRight: isAnimating ? '0.15em solid currentColor' : 'none'\r\n                    }}\r\n                    aria-label={text}\r\n                >\r\n                    {displayText}\r\n                </span>\r\n            );\r\n        },\r\n\r\n        fadeIn: (text) => (\r\n            <span\r\n                style={{\r\n                    ...defaultStyles.base,\r\n                    ...defaultStyles.fadeIn,\r\n                    ...styles\r\n                }}\r\n            >\r\n                {text}\r\n            </span>\r\n        ),\r\n\r\n        bounce: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...styles }}>\r\n                {text.split('').map((char, i) => (\r\n                    <span\r\n                        key={i}\r\n                        style={{\r\n                            ...defaultStyles.bounce,\r\n                            animation: `bounce 0.5s ease infinite`,\r\n                            animationDelay: `${i * 0.1}s`\r\n                        }}\r\n                    >\r\n                        {char}\r\n                    </span>\r\n                ))}\r\n            </span>\r\n        ),\r\n\r\n        glitch: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...defaultStyles.glitch, ...styles }}>\r\n                {text}\r\n                <span className=\"glitch-effect\" data-text={text}></span>\r\n            </span>\r\n        ),\r\n\r\n        rainbow: (text) => (\r\n            <span style={{ ...defaultStyles.base, ...defaultStyles.rainbow, ...styles }}>\r\n                {text}\r\n            </span>\r\n        )\r\n    };\r\n\r\n    useEffect(() => {\r\n        const styleSheet = document.createElement('style');\r\n        styleSheet.textContent = `\r\n      @keyframes fadeIn {\r\n        to { opacity: 1; }\r\n      }\r\n      @keyframes bounce {\r\n        0%, 100% { transform: translateY(0); }\r\n        50% { transform: translateY(-10px); }\r\n      }\r\n      @keyframes glitch {\r\n        2%, 64% { transform: translate(2px,0) skew(0deg); }\r\n        4%, 60% { transform: translate(-2px,0) skew(0deg); }\r\n        62% { transform: translate(0,0) skew(5deg); }\r\n      }\r\n      @keyframes rainbow { \r\n        0% { background-position: 0% 50%; }\r\n        50% { background-position: 100% 50%; }\r\n        100% { background-position: 0% 50%; }\r\n      }\r\n    `;\r\n        document.head.appendChild(styleSheet);\r\n        return () => document.head.removeChild(styleSheet);\r\n    }, []);\r\n\r\n    const safeText = typeof text === 'string' ? text : String(text || '');\r\n    const safeEffect = effects.hasOwnProperty(effect) ? effect : 'typewriter';\r\n\r\n    return (\r\n        <TextErrorBoundary>\r\n            {effects[safeEffect](safeText)}\r\n        </TextErrorBoundary>\r\n    );\r\n};\r\n\r\nexport default AnimatedText;","import React, { useRef, useEffect, useCallback } from 'react';\r\nimport {\r\n    starryNight, floatingBubbles,\r\n    gradientWave, particleNetwork, galaxySpiral,\r\n    rainbowWaves, geometricShapes, fireflies,\r\n    matrixRain, quantumField, electricStorm,\r\n    cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n    neuralNetwork,\r\n    dnaHelix, snowFall, realisticRain, autumnLeaves, realisticClouds, fireflyForest, fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n} from './backgroundAnimations';\r\nimport AnimatedText from './AnimatedText';\r\n\r\n/**\r\n * @module AnimatedBackground\r\n * @description A React component that creates animated canvas backgrounds with blend modes\r\n */\r\n\r\n/**\r\n * AnimatedBackground Component\r\n * @param {Object} props - Component props\r\n * @param {string} props.animationName - Name of the animation to display\r\n * @param {string} [props.fallbackAnimation='geometricShapes'] - Fallback animation if main animation fails\r\n * @param {number} [props.fps=60] - Frames per second for the animation\r\n * @param {string} [props.blendMode='normal'] - Canvas blend mode\r\n * @param {Object} [props.style] - Additional CSS styles for the canvas\r\n * @returns {React.Component} A canvas element with the animated background\r\n */\r\nconst AnimatedBackground = ({\r\n    animationName,\r\n    fallbackAnimation = 'geometricShapes',\r\n    fps = 60,\r\n    blendMode = 'normal',\r\n    style\r\n}) => {\r\n    const canvasRef = useRef(null);\r\n    const animationRef = useRef(null);\r\n    const blendModes = [\r\n        'normal',\r\n        'multiply',\r\n        'screen',\r\n        'overlay',\r\n        'darken',\r\n        'lighten',\r\n        'color-dodge',\r\n        'color-burn',\r\n        'hard-light',\r\n        'soft-light',\r\n        'difference',\r\n        'exclusion',\r\n        'hue',\r\n        'saturation',\r\n        'color',\r\n        'luminosity'\r\n    ];\r\n\r\n    const setupCanvas = useCallback(() => {\r\n        const canvas = canvasRef.current;\r\n        const ctx = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        // Set blend mode\r\n        ctx.globalCompositeOperation = blendModes.includes(blendMode)\r\n            ? blendMode\r\n            : 'normal';\r\n\r\n        const animations = {\r\n            starryNight, floatingBubbles, gradientWave, particleNetwork, galaxySpiral,\r\n            rainbowWaves, geometricShapes, fireflies, matrixRain, quantumField,\r\n            electricStorm, cosmicDust, neonPulse, auroraBorealis, oceanWaves,\r\n            neuralNetwork, dnaHelix, snowFall, realisticRain, realisticClouds,\r\n            fireflyForest, autumnLeaves, fallingFoodFiesta, hauntedForest,\r\n            ghostlyApparitions,\r\n            spiderwebOverlay,\r\n            undeadGraveyard,\r\n            bloodRain,\r\n            creepyCrawlies,\r\n        };\r\n\r\n        let animation = animations[animationName];\r\n\r\n        if (!animation) {\r\n            console.warn(`Animation \"${animationName}\" not found. Using fallback animation.`);\r\n            animation = animations[fallbackAnimation] || animations.geometricShapes;\r\n        }\r\n\r\n        return animation(canvas, ctx);\r\n    }, [animationName, fallbackAnimation, blendMode]);\r\n\r\n    useEffect(() => {\r\n        const animate = () => {\r\n            const animation = setupCanvas();\r\n            let lastTime = 0;\r\n            const frameInterval = 1000 / fps;\r\n\r\n            const loop = (currentTime) => {\r\n                animationRef.current = requestAnimationFrame(loop);\r\n\r\n                const deltaTime = currentTime - lastTime;\r\n                if (deltaTime >= frameInterval) {\r\n                    lastTime = currentTime - (deltaTime % frameInterval);\r\n                    animation();\r\n                }\r\n            };\r\n\r\n            animationRef.current = requestAnimationFrame(loop);\r\n        };\r\n\r\n        animate();\r\n\r\n        const handleResize = () => {\r\n            if (canvasRef.current) {\r\n                canvasRef.current.width = window.innerWidth;\r\n                canvasRef.current.height = window.innerHeight;\r\n                setupCanvas();\r\n            }\r\n        };\r\n\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            if (animationRef.current) {\r\n                cancelAnimationFrame(animationRef.current);\r\n            }\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, [fps, setupCanvas]);\r\n\r\n    return (\r\n        <canvas\r\n            ref={canvasRef}\r\n            style={{\r\n                position: 'fixed',\r\n                top: 0,\r\n                left: 0,\r\n                width: '100%',\r\n                height: '100%',\r\n                zIndex: -1,\r\n                ...style\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport {\r\n    AnimatedBackground,\r\n    starryNight,\r\n    floatingBubbles,\r\n    gradientWave,\r\n    particleNetwork,\r\n    galaxySpiral,\r\n    rainbowWaves,\r\n    geometricShapes,\r\n    fireflies,\r\n    matrixRain,\r\n    quantumField,\r\n    electricStorm,\r\n    cosmicDust,\r\n    neonPulse,\r\n    auroraBorealis,\r\n    fallingFoodFiesta,\r\n    hauntedForest,\r\n    ghostlyApparitions,\r\n    spiderwebOverlay,\r\n    undeadGraveyard,\r\n    bloodRain,\r\n    creepyCrawlies,\r\n    AnimatedText,\r\n\r\n\r\n\r\n};"],"names":["starryNight","canvas","ctx","stars","i","push","x","Math","random","width","y","height","radius","vx","floor","vy","twinkle","color","concat","fillStyle","fillRect","forEach","star","opacity","abs","sin","gradient","createRadialGradient","addColorStop","beginPath","arc","PI","fill","floatingBubbles","bubbles","speed","glowColor","bubble","gradientWave","time","createLinearGradient","moveTo","lineTo","strokeStyle","lineWidth","stroke","particleNetwork","particles","particle","length","j","dx","dy","distance","sqrt","galaxySpiral","arguments","undefined","starCount","angle","cos","initializeStars","rotation","save","translate","rotate","drawStars","restore","rainbowWaves","colors","auroraBorealis","colorStops","pos","_loop","stop","closePath","neonPulse","circles","phase","circle","glow","cosmicDust","size","speedX","speedY","electricStorm","bolts","points","life","createBolt","bolt","index","splice","quantumField","hue","otherParticle","geometricShapes","shapes","type","clearRect","shape","fireflies","brightness","firefly","max","min","matrixRain","columns","drops","characters","font","text","fillText","dnaHelix","t","r","neuralNetwork","nodes","connections","backgroundGradient","node","_ref","_ref2","_slicedToArray","oceanWaves","skyGradient","sun","clouds","sunGradient","cloud","snowFall","snowflakes","moon","mountains","moonGradient","mountain","point","flake","fireflyForest","trees","angleSpeed","glowIntensity","tree","fly","Date","now","realisticClouds","gradientHeight","createCloud","particleCount","createSkyGradient","sunRadius","autumnLeaves","loadedCount","leaves","leafColors","leafImages","leafImagesLoaded","imagesLoaded","src","img","Image","onload","onerror","amplitude","imageIndex","leaf","drawImage","ellipse","drawLeaf","realisticRain","raindrops","splashes","drop","splash","fallingFoodFiesta","foodItems","foodTypes","g","b","colorIndex","nextColorIndex","colorT","emoji","rotationSpeed","color1","color2","currentColor","round","filter","item","textAlign","textBaseline","strokeText","hauntedForest","fog","ghostlyApparitions","ghosts","ghost","bezierCurveTo","spiderwebOverlay","webs","web","drawWeb","undeadGraveyard","graves","zombies","grave","zombie","bloodRain","splats","splat","creepyCrawlies","bugs","webNodes","slice","otherNode","bug","TextErrorBoundary","_React$Component","_this","_classCallCheck","_len","args","Array","_key","_defineProperty","_callSuper","this","hasError","_inherits","React","Component","key","value","error","state","createElement","props","children","AnimatedText","_ref$text","_ref$effect","effect","_ref$config","config","_ref$styles","styles","defaultConfig","_objectSpread","loop","delay","defaultStyles","base","display","fontFamily","typewriter","whiteSpace","overflow","borderRight","fadeIn","animation","bounce","glitch","position","rainbow","background","backgroundSize","backgroundClip","WebkitBackgroundClip","WebkitTextFillColor","effects","_useState2","useState","displayText","setDisplayText","_useState4","isAnimating","setIsAnimating","useEffect","timer","setTimeout","startAnimation","setInterval","prev","clearInterval","console","clearTimeout","style","split","map","char","animationDelay","className","styleSheet","document","textContent","head","appendChild","removeChild","safeText","String","safeEffect","hasOwnProperty","AnimatedBackground","animationName","_ref$fallbackAnimatio","fallbackAnimation","_ref$fps","fps","_ref$blendMode","blendMode","canvasRef","useRef","animationRef","blendModes","setupCanvas","useCallback","current","getContext","window","innerWidth","innerHeight","globalCompositeOperation","includes","animations","warn","lastTime","frameInterval","requestAnimationFrame","currentTime","deltaTime","handleResize","addEventListener","cancelAnimationFrame","removeEventListener","ref","top","left","zIndex"],"mappings":"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","ignoreList":[0,1,2]}},
    {"offset": {"line": 1263, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}